partial struct PLACEHOLDERID
{
    public static implicit operator int(PLACEHOLDERID id) => id.Value;
    public static explicit operator PLACEHOLDERID(int value) => new PLACEHOLDERID(value);
    public static explicit operator PLACEHOLDERID?(int? value) => value.HasValue ? new PLACEHOLDERID(value.Value) : null;
}

[global::Newtonsoft.Json.JsonConverter(typeof(PLACEHOLDERIDNewtonsoftJsonConverter))]
partial struct PLACEHOLDERID
{
    public partial class PLACEHOLDERIDNewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        public override bool CanConvert(global::System.Type objectType)
        {
            return objectType == typeof(PLACEHOLDERID);
        }

        public override void WriteJson(global::Newtonsoft.Json.JsonWriter writer, object? value, global::Newtonsoft.Json.JsonSerializer serializer)
        {
            serializer.Serialize(writer, value is PLACEHOLDERID id ? id.Value : null);
        }

        public override object? ReadJson(global::Newtonsoft.Json.JsonReader reader, global::System.Type objectType, object? existingValue, global::Newtonsoft.Json.JsonSerializer serializer)
        {
            var result = serializer.Deserialize<int?>(reader);
            return result.HasValue ? new PLACEHOLDERID(result.Value) : null;
        }
    }
}

partial struct PLACEHOLDERID
{
    public partial class EfCoreValueConverter : global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<PLACEHOLDERID, int>
    {
        public EfCoreValueConverter() : this(null) { }
        public EfCoreValueConverter(global::Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints? mappingHints = null)
            : base(
                id => id.Value,
                value => new PLACEHOLDERID(value),
                mappingHints
            )
        { }
    }
}

